# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/devices", type: :request do
  # Device. As you add validations to Device, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    build(:device).attributes.to_h
  end

  let(:invalid_attributes) do
    { serial: "" }
  end

  describe "GET /index" do
    it "renders a successful response" do
      Device.create! valid_attributes
      get devices_url
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_device_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      device = Device.create! valid_attributes
      get edit_device_url(device)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Device" do
        expect do
          post devices_url, params: { device: valid_attributes }
        end.to change(Device, :count).by(1)
      end

      it "redirects to the created device" do
        post devices_url, params: { device: valid_attributes }
        expect(response).to redirect_to(devices_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Device" do
        expect do
          post devices_url, params: { device: invalid_attributes }
        end.to change(Device, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post devices_url, params: { device: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        build(:device).attributes.to_h
      end

      it "updates the requested device" do
        device = Device.create! valid_attributes
        expect do
          patch device_url(device), params: { device: new_attributes }
        end.to change { device.reload.serial }
      end

      it "redirects to the device" do
        device = Device.create! valid_attributes
        patch device_url(device), params: { device: new_attributes }
        device.reload
        expect(response).to redirect_to(devices_url)
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        device = Device.create! valid_attributes
        patch device_url(device), params: { device: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested device" do
      device = Device.create! valid_attributes
      expect do
        delete device_url(device)
      end.to change(Device, :count).by(-1)
    end

    it "redirects to the devices list" do
      device = Device.create! valid_attributes
      delete device_url(device)
      expect(response).to redirect_to(devices_url)
    end
  end
end
